const express = require('express');
const path = require('path');
var cors = require('cors')
const app = express();
var axios = require('axios');
var bodyParser = require('body-parser')
var fs = require('fs');
const NodeCache = require('node-cache');
const myCache = new NodeCache();
var setCookie = require('set-cookie-parser');
xml2js = require('xml2js');
require('dotenv').config({path: __dirname + '/../.env'})

app.use(bodyParser.json())
app.use(bodyParser.urlencoded({ extended: true }));
app.use(cors())
var parser = new xml2js.Parser();
var builder = new xml2js.Builder();


if (!fs.existsSync('cookiejar.txt')) {
    axios({
        method: 'post',
        url: 'https://' + process.env['URL'] + 'ibmmq/rest/v2/login',
        
        headers:{
            'Content-Type': 'application/json'
        },
        data: {
            username: process.env['USERNAME'],
            password: process.env['PASSWORD']
        }
    }).then(res =>{
        var cookies = setCookie.parse(res, {
            decodeValues: true,  // default: true
            // map: true           //default: false
        })
        // console.log(cookies)
        var content = `# Netscape HTTP Cookie File
# https://curl.haxx.se/docs/http-cookies.html
# This file was generated by libcurl! Edit at your own risk.

#HttpOnly_${process.env['URL']}	FALSE	/	TRUE	0	${cookies[0].name}	${cookies[0].value}
`
        // console.log(content)
        var status = myCache.set('token',{token: cookies[0].name +'='+ cookies[0].value})
        if (status){
            console.log('cache written')
        }
        fs.writeFile('./cookiejar.txt', content, err => {
            if (err) {
              console.error(err)
              return
            } else {
                console.log('file written')
            }
        })
        fs.writeFile('./cookiejar.json', JSON.stringify(cookies[0]), err => {
            if (err) {
              console.error(err)
              return
            } else {
                console.log('json written')
            }
        })
    }).catch(err =>{
        console.log(err)
    })
} else {
    // fs.readFile('./cookiejar.json',(err,data)=>{
    //     var data = JSON.parse(data)
    //     var status = myCache.set('token',{token: data.name +'='+ data.value})
    //     if(status) {
    //         console.log('cache written')
    //     }
    // })

    axios({
        method: 'post',
        url: 'https://' + process.env['URL'] + 'ibmmq/rest/v2/login',
        headers:{
            'Content-Type': 'application/json'
        },
        data: {
          username: process.env['USERNAME'],
          password: process.env['PASSWORD']
        }
    }).then(res =>{
        var cookies = setCookie.parse(res, {
            decodeValues: true,  // default: true
            // map: true           //default: false
        })
        // console.log(cookies)
        var content = `# Netscape HTTP Cookie File
# https://curl.haxx.se/docs/http-cookies.html
# This file was generated by libcurl! Edit at your own risk.

#HttpOnly_${process.env['URL']}	FALSE	/	TRUE	0	${cookies[0].name}	${cookies[0].value}
`
        // console.log(content)
        var status = myCache.set('token',{token: cookies[0].name +'='+ cookies[0].value})
        if (status){
            console.log('cache written')
        }
        fs.writeFile('./cookiejar.txt', content, err => {
            if (err) {
              console.error(err)
              return
            } else {
                console.log('file written')
            }
        })
        fs.writeFile('./cookiejar.json', JSON.stringify(cookies[0]), err => {
            if (err) {
              console.error(err)
              return
            } else {
                console.log('json written')
            }
        })
    }).catch(err =>{
        console.log(err)
    })

}

if (fs.existsSync('data.xml')) {
    var parser = new xml2js.Parser();
    fs.readFile(__dirname + '/data.xml', function(err, data) {
        xml2js.parseStringPromise(data , {reversible: true, explicitArray: false}).then((result)=>{
            var status = myCache.set('data',result)
            if(status) {
                console.log('cache written')
            }
        }).catch(err =>{
            console.log(err)
        })
    })
} else {
    var obj = {
        root: {
            containers:[
                {
                    container_num: '1',
                    lat:"73.1",
                    long:"77.8"
                },
                {
                    container_num: '2',
                    lat:"56.5",
                    long:"34.2"
                },
            ]
        }
    }

    var xml = builder.buildObject(obj);
    fs.writeFile('./data.xml', xml, err => {
        if (err) {
            var status = myCache.set('data',obj)
            if(status) {
                console.log('cache written')
            }
            console.error(err)
            return
        } else {
            console.log('json written')
        }
    })
}

function get(){
    var config = {
        method: 'delete',
        url: `https://${process.env['URL']}ibmmq/rest/v2/messaging/qmgr/${process.env['QMANAGER']}/queue/${process.env['QINPUTC']}/message`,
        headers: {
            'ibm-mq-rest-csrf-token': 'token-value',
            'Accept': 'application/json',
            'Cookie': myCache.get('token').token
        }
    };

    axios(config)
    .then(function (response) {
        // console.log(JSON.stringify(response.data));
        // console.log((response.data));
        if(response.data){
            // console.log((response.data.messageId, typeof(response.data.messageId)));
            var msgId = response.data.messageId
            console.log(response.data)
            xml2js.parseStringPromise(response.data.xml , {reversible: true, explicitArray: false}).then((result)=>{
                console.log(result)
                var data = myCache.get('data')
                var containerNum = result.root.container_num
                console.log(containerNum)
                var ret = data.root.containers.filter(item => parseInt(item.container_num) === parseInt(containerNum))
                console.log(ret)
                ret[0].msgId = msgId
                console.log(ret[0])
                var config = {
                    method: 'post',
                    url: `https://${process.env['URL']}ibmmq/rest/v2/messaging/qmgr/${process.env['QMANAGER']}/queue/${process.env['QOUTPUTC']}/message`,
                    headers: {
                        'ibm-mq-rest-csrf-token': 'token-value', 
                        'Content-Type': 'text/plain',
                        'Cookie': myCache.get('token').token,
                        'ibm-mq-md-correlationId': msgId
                    },
                    data: builder.buildObject(ret[0])
                };

                axios(config)
                .then(response => {
                    // console.log(response.headers['ibm-mq-md-messageid'])
                    const messageId = response.headers['ibm-mq-md-messageid']
                    console.log(messageId)
                    // console.log(JSON.stringify(response.data));
                    // res.writeHead(200, {'Content-Type': 'application/json'});
                    // res.write(JSON.stringify({"messageId": messageId}));
                    // res.end()
                })
                .catch(function (error) {
                    console.log(error);
                    // res.writeHead(200, {'Content-Type': 'application/json'});
                    // res.write(JSON.stringify({"data": 'error'}));
                    // res.end()
                });
            })
        }
    }).catch(err =>{
        console.log(err)
    })
}

app.get('/getContainer', (req, res) => {
    var ret = myCache.get('data')
    get()
    res.writeHead(200, {'Content-Type': 'application/json'});
    res.write(JSON.stringify({"ok": 'ok'}));
    res.end()
});

app.get('/update', (req, res) => {
    update()
    res.writeHead(200, {'Content-Type': 'application/json'});
    res.write(JSON.stringify({"updated":"true"}));
    res.end()
})

function update () {
    var config = {
        method: 'delete',
        url: `https://${process.env['URL']}ibmmq/rest/v2/messaging/qmgr/${process.env['QMANAGER']}/queue/updateC/message`,
        headers: {
            'ibm-mq-rest-csrf-token': 'token-value',
            'Accept': 'application/json',
            'Cookie': myCache.get('token').token
        }
    };

    axios(config)
    .then(function (response) {
        // console.log(JSON.stringify(response.data));
        if(response.data){
            // console.log((response.data.messageId, typeof(response.data.messageId)));
            var containerNum = response.data.container_num

            var obj = myCache.get('data')
            var arr = obj.containers.map(item =>{
                if(item.container_num === containerNum){
                    item.lat = response.data.lat
                    item.long = response.data.long
                    console.log('updated')
                }
                return item
            })
            obj.containers = arr

            fs.writeFile('./data.json', JSON.stringify(obj), err => {
                if (err) {
                    var status = myCache.set('data',obj)
                    if(status) {
                        console.log('cache written')
                    }
                    console.error(err)
                    return
                } else {
                    console.log('json written')
                }
            })
            
            var status = myCache.set('data',obj)
            if(status) {
                console.log('cache written')
            }
        }
    }).catch(err =>{
        console.log(err)
    })
}

setInterval(get, 3000)
// setInterval(update, 3000)

app.listen(5000)