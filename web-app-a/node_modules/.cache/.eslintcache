[{"/Users/kushagra/IBM/IBM MQ/app/web-app-a/src/index.js":"1","/Users/kushagra/IBM/IBM MQ/app/web-app-a/src/App.js":"2","/Users/kushagra/IBM/IBM MQ/app/web-app-a/src/reportWebVitals.js":"3","/Users/kushagra/IBM/IBM MQ/app/web-app-a/src/components/Landing/index.js":"4","/Users/kushagra/IBM/IBM MQ/app/web-app-a/src/components/Landing/Landing.js":"5","/Users/kushagra/IBM/Use-IBM-MQ-and-App-Connect-on-Cloud-to-transform-data/web-app-a/src/index.js":"6","/Users/kushagra/IBM/Use-IBM-MQ-and-App-Connect-on-Cloud-to-transform-data/web-app-a/src/App.js":"7","/Users/kushagra/IBM/Use-IBM-MQ-and-App-Connect-on-Cloud-to-transform-data/web-app-a/src/reportWebVitals.js":"8","/Users/kushagra/IBM/Use-IBM-MQ-and-App-Connect-on-Cloud-to-transform-data/web-app-a/src/components/Landing/index.js":"9","/Users/kushagra/IBM/Use-IBM-MQ-and-App-Connect-on-Cloud-to-transform-data/web-app-a/src/components/Landing/Landing.js":"10"},{"size":501,"mtime":1620642226191,"results":"11","hashOfConfig":"12"},{"size":263,"mtime":1620642226187,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1620642226192,"results":"14","hashOfConfig":"12"},{"size":56,"mtime":1620642226191,"results":"15","hashOfConfig":"12"},{"size":6218,"mtime":1621865403577,"results":"16","hashOfConfig":"12"},{"size":501,"mtime":1620642226191,"results":"17","hashOfConfig":"18"},{"size":263,"mtime":1620642226187,"results":"19","hashOfConfig":"18"},{"size":362,"mtime":1620642226192,"results":"20","hashOfConfig":"18"},{"size":56,"mtime":1620642226191,"results":"21","hashOfConfig":"18"},{"size":6395,"mtime":1623312241716,"results":"22","hashOfConfig":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"skl9hp",{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jsnd85",{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/kushagra/IBM/IBM MQ/app/web-app-a/src/index.js",[],["46","47"],"/Users/kushagra/IBM/IBM MQ/app/web-app-a/src/App.js",["48"],"import logo from './logo.svg';\nimport './App.scss';\nimport Landing from './components/Landing'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Landing />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/kushagra/IBM/IBM MQ/app/web-app-a/src/reportWebVitals.js",[],"/Users/kushagra/IBM/IBM MQ/app/web-app-a/src/components/Landing/index.js",[],"/Users/kushagra/IBM/IBM MQ/app/web-app-a/src/components/Landing/Landing.js",["49"],"import React from 'react';\nimport {Table, TableHeader, TableRow, TableBody, TableCell, TableHead} from 'carbon-components-react'\nimport { Button, Loading, InlineLoading, FormGroup, TextInput } from 'carbon-components-react';\nimport axios from 'axios'\nimport ReactJson from 'react-json-view'\nimport _ from 'lodash'\n\nclass Landing extends React.Component {\n    constructor(){\n        super()\n        this.state = {\n            headers:[\n                {\n                    key:\"seqNo\",\n                    header:\"Seq. No\"\n                },\n                {\n                    key:\"messageId\",\n                    header:\"Message ID\"\n                },\n                // {\n                //     key:\"correlationId\",\n                //     header:\"Correlation ID\"\n                // },\n                {\n                    key:\"message\",\n                    header:\"Message\"\n                }\n            ],\n            seqNo:1,\n            data:[],\n            loading: false, \n            messageLoading:{}\n        }\n    }\n\n    componentDidMount = ()=>{\n        axios.get('http://localhost:8080/getMessageList?q=inputC').then(async res=>{\n            console.log(res.data.data)\n            // var msg = res.data.data.messages\n            // console.log(msg)\n            // var arr = await msg.map(item =>{\n            //     item.message = \n            //         <div>\n            //             {this.state.messageLoading[item.messageId]?\n            //                 <InlineLoading description=\"Loading...\" />\n            //                 :\n            //                 <Button style={{margin:\".5rem\"}} onClick={()=>this.getMessage(item.messageId)}>Fetch</Button>\n            //             }\n            //         </div>\n            //     return item\n            // })\n            // this.setState({data: arr, loading: false})\n        })\n    }\n\n    handleChange = (e)=>{\n        const { name, value } = e.target\n        // console.log(name, value)\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleSyncSubmit = (e)=>{\n\n        // let correlationId = _.times(48, () => (Math.random()*0xF<<0).toString(16)).join('');\n\n        e.preventDefault()\n        const data = {\n            message: { container_num: this.state.input},\n            q:\"tq2\",\n            // correlationId: correlationId,\n        }\n\n        axios.post(`http://localhost:8080/postMessage`, data)\n        .then(res=>{\n            console.log(res.data)\n            // alert(\"Data submitted with submission ID: \" + res.data.messageId)\n            var arr = this.state.data\n            const newData = {\n                seqNo: this.state.seqNo,\n                messageId: res.data.messageId,\n                // correlationId: correlationId,\n                message: [\n                    <div>\n                        {this.state.messageLoading[res.data.messageId]?\n                            <InlineLoading description=\"Loading...\" />\n                            :\n                            <Button style={{margin:\".5rem\"}} onClick={()=>this.handleFetch(res.data.messageId)}>Fetch</Button>\n                        }\n                    </div>\n                ]\n            }\n            arr.push(newData)\n            this.setState({input:\"\", seqNo: newData.seqNo+1, data:arr})\n        })\n    }\n\n    handleFetch = (cid) =>{\n        // console.log(this.state.messageLoading)\n        // var loadState = this.state.messageLoading\n        // loadState[cid] = true\n        // console.log(loadState)\n        // this.setState({messageLoading: loadState})\n        axios.get(`http://localhost:8080/getMessageFromC?q=outputC&id=${cid}`).then(async res=>{\n            console.log(res.data.data)\n            var arr = await this.state.data.map(item =>{\n                if(item.messageId === cid)\n                    if(res.data.data)\n                        item.message = JSON.stringify(res.data.data)\n                    else\n                        alert('No data found')\n                return item\n            })\n        this.setState({data: arr, loading: false})\n        })\n    }\n\n    render(){\n      return (\n        this.state.loading?\n        <div>\n            <Loading\n            description=\"Active loading indicator\" withOverlay={false}\n            />        \n        </div>\n          : \n        <div>\n            <div>\n            <FormGroup legendText=\"Sync Call\" style={{ minWidth: '400px' }}>\n                <TextInput\n                id=\"one\"\n                name=\"input\"\n                value={this.state.input}\n                labelText=\"Enter Container Num\"\n                onChange={this.handleChange}\n                placeholder=\"Enter Container Number\"\n                style={{ marginBottom: '1rem' }}\n                />\n                <Button onClick={this.handleSyncSubmit}>Submit</Button>\n            </FormGroup>\n            </div>\n            <div style={{width:\"50rem\", textAlign:\"left\"}}>\n                {this.state.toDisplay?\n                    <ReactJson \n                        src={this.state.toDisplay} \n                        theme=\"solarized\"\n                    />\n                :\n                <></>\n                }\n            </div>\n            {\n                this.state.data.length>0?\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                        {this.state.headers.map((header) => (\n                            <TableHeader key={header.key}>{header.header}</TableHeader>\n                        ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {this.state.data.map((row) => (\n                        <TableRow key={row.key}>\n                            {Object.keys(row)\n                            .map((key) => {\n                                // console.log(key)\n                                return <TableCell key={key}>{row[key]}</TableCell>;\n                            })}\n                        </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>           \n                :\n                <></>\n            }\n        </div>\n      )\n    }\n};\nexport default Landing;","/Users/kushagra/IBM/Use-IBM-MQ-and-App-Connect-on-Cloud-to-transform-data/web-app-a/src/index.js",[],"/Users/kushagra/IBM/Use-IBM-MQ-and-App-Connect-on-Cloud-to-transform-data/web-app-a/src/App.js",["50"],"/Users/kushagra/IBM/Use-IBM-MQ-and-App-Connect-on-Cloud-to-transform-data/web-app-a/src/reportWebVitals.js",[],"/Users/kushagra/IBM/Use-IBM-MQ-and-App-Connect-on-Cloud-to-transform-data/web-app-a/src/components/Landing/index.js",[],"/Users/kushagra/IBM/Use-IBM-MQ-and-App-Connect-on-Cloud-to-transform-data/web-app-a/src/components/Landing/Landing.js",["51"],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":1,"column":8,"nodeType":"58","messageId":"59","endLine":1,"endColumn":12},{"ruleId":"56","severity":1,"message":"60","line":6,"column":8,"nodeType":"58","messageId":"59","endLine":6,"endColumn":9},{"ruleId":"56","severity":1,"message":"57","line":1,"column":8,"nodeType":"58","messageId":"59","endLine":1,"endColumn":12},{"ruleId":"56","severity":1,"message":"60","line":6,"column":8,"nodeType":"58","messageId":"59","endLine":6,"endColumn":9},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'_' is defined but never used.","no-global-assign","no-unsafe-negation"]