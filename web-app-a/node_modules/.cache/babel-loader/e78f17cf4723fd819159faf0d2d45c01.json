{"ast":null,"code":"import { tokenRegex, revFormat, formats } from \"./formatting\";\nimport { defaults } from \"../types/options\";\nimport { english } from \"../l10n/default\";\nexport const createDateFormatter = ({\n  config = defaults,\n  l10n = english,\n  isMobile = false\n}) => (dateObj, frmt, overrideLocale) => {\n  const locale = overrideLocale || l10n;\n\n  if (config.formatDate !== undefined && !isMobile) {\n    return config.formatDate(dateObj, frmt, locale);\n  }\n\n  return frmt.split(\"\").map((c, i, arr) => formats[c] && arr[i - 1] !== \"\\\\\" ? formats[c](dateObj, locale, config) : c !== \"\\\\\" ? c : \"\").join(\"\");\n};\nexport const createDateParser = ({\n  config = defaults,\n  l10n = english\n}) => (date, givenFormat, timeless, customLocale) => {\n  if (date !== 0 && !date) return undefined;\n  const locale = customLocale || l10n;\n  let parsedDate;\n  const dateOrig = date;\n  if (date instanceof Date) parsedDate = new Date(date.getTime());else if (typeof date !== \"string\" && date.toFixed !== undefined) parsedDate = new Date(date);else if (typeof date === \"string\") {\n    const format = givenFormat || (config || defaults).dateFormat;\n    const datestr = String(date).trim();\n\n    if (datestr === \"today\") {\n      parsedDate = new Date();\n      timeless = true;\n    } else if (/Z$/.test(datestr) || /GMT$/.test(datestr)) parsedDate = new Date(date);else if (config && config.parseDate) parsedDate = config.parseDate(date, format);else {\n      parsedDate = !config || !config.noCalendar ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0) : new Date(new Date().setHours(0, 0, 0, 0));\n      let matched,\n          ops = [];\n\n      for (let i = 0, matchIndex = 0, regexStr = \"\"; i < format.length; i++) {\n        const token = format[i];\n        const isBackSlash = token === \"\\\\\";\n        const escaped = format[i - 1] === \"\\\\\" || isBackSlash;\n\n        if (tokenRegex[token] && !escaped) {\n          regexStr += tokenRegex[token];\n          const match = new RegExp(regexStr).exec(date);\n\n          if (match && (matched = true)) {\n            ops[token !== \"Y\" ? \"push\" : \"unshift\"]({\n              fn: revFormat[token],\n              val: match[++matchIndex]\n            });\n          }\n        } else if (!isBackSlash) regexStr += \".\";\n\n        ops.forEach(({\n          fn,\n          val\n        }) => parsedDate = fn(parsedDate, val, locale) || parsedDate);\n      }\n\n      parsedDate = matched ? parsedDate : undefined;\n    }\n  }\n\n  if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {\n    config.errorHandler(new Error(`Invalid date provided: ${dateOrig}`));\n    return undefined;\n  }\n\n  if (timeless === true) parsedDate.setHours(0, 0, 0, 0);\n  return parsedDate;\n};\nexport function compareDates(date1, date2, timeless = true) {\n  if (timeless !== false) {\n    return new Date(date1.getTime()).setHours(0, 0, 0, 0) - new Date(date2.getTime()).setHours(0, 0, 0, 0);\n  }\n\n  return date1.getTime() - date2.getTime();\n}\nexport function compareTimes(date1, date2) {\n  return 3600 * (date1.getHours() - date2.getHours()) + 60 * (date1.getMinutes() - date2.getMinutes()) + date1.getSeconds() - date2.getSeconds();\n}\nexport const isBetween = (ts, ts1, ts2) => {\n  return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);\n};\nexport const duration = {\n  DAY: 86400000\n};\nexport function getDefaultHours(config) {\n  let hours = config.defaultHour;\n  let minutes = config.defaultMinute;\n  let seconds = config.defaultSeconds;\n\n  if (config.minDate !== undefined) {\n    const minHour = config.minDate.getHours();\n    const minMinutes = config.minDate.getMinutes();\n    const minSeconds = config.minDate.getSeconds();\n\n    if (hours < minHour) {\n      hours = minHour;\n    }\n\n    if (hours === minHour && minutes < minMinutes) {\n      minutes = minMinutes;\n    }\n\n    if (hours === minHour && minutes === minMinutes && seconds < minSeconds) seconds = config.minDate.getSeconds();\n  }\n\n  if (config.maxDate !== undefined) {\n    const maxHr = config.maxDate.getHours();\n    const maxMinutes = config.maxDate.getMinutes();\n    hours = Math.min(hours, maxHr);\n    if (hours === maxHr) minutes = Math.min(maxMinutes, minutes);\n    if (hours === maxHr && minutes === maxMinutes) seconds = config.maxDate.getSeconds();\n  }\n\n  return {\n    hours,\n    minutes,\n    seconds\n  };\n}","map":{"version":3,"sources":["/Users/kushagra/IBM/IBM MQ/app/web-app-a/node_modules/carbon-components-react/node_modules/flatpickr/dist/esm/utils/dates.js"],"names":["tokenRegex","revFormat","formats","defaults","english","createDateFormatter","config","l10n","isMobile","dateObj","frmt","overrideLocale","locale","formatDate","undefined","split","map","c","i","arr","join","createDateParser","date","givenFormat","timeless","customLocale","parsedDate","dateOrig","Date","getTime","toFixed","format","dateFormat","datestr","String","trim","test","parseDate","noCalendar","getFullYear","setHours","matched","ops","matchIndex","regexStr","length","token","isBackSlash","escaped","match","RegExp","exec","fn","val","forEach","isNaN","errorHandler","Error","compareDates","date1","date2","compareTimes","getHours","getMinutes","getSeconds","isBetween","ts","ts1","ts2","Math","min","max","duration","DAY","getDefaultHours","hours","defaultHour","minutes","defaultMinute","seconds","defaultSeconds","minDate","minHour","minMinutes","minSeconds","maxDate","maxHr","maxMinutes"],"mappings":"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","sourcesContent":["import { tokenRegex, revFormat, formats, } from \"./formatting\";\nimport { defaults } from \"../types/options\";\nimport { english } from \"../l10n/default\";\nexport const createDateFormatter = ({ config = defaults, l10n = english, isMobile = false, }) => (dateObj, frmt, overrideLocale) => {\n    const locale = overrideLocale || l10n;\n    if (config.formatDate !== undefined && !isMobile) {\n        return config.formatDate(dateObj, frmt, locale);\n    }\n    return frmt\n        .split(\"\")\n        .map((c, i, arr) => formats[c] && arr[i - 1] !== \"\\\\\"\n        ? formats[c](dateObj, locale, config)\n        : c !== \"\\\\\"\n            ? c\n            : \"\")\n        .join(\"\");\n};\nexport const createDateParser = ({ config = defaults, l10n = english }) => (date, givenFormat, timeless, customLocale) => {\n    if (date !== 0 && !date)\n        return undefined;\n    const locale = customLocale || l10n;\n    let parsedDate;\n    const dateOrig = date;\n    if (date instanceof Date)\n        parsedDate = new Date(date.getTime());\n    else if (typeof date !== \"string\" &&\n        date.toFixed !== undefined)\n        parsedDate = new Date(date);\n    else if (typeof date === \"string\") {\n        const format = givenFormat || (config || defaults).dateFormat;\n        const datestr = String(date).trim();\n        if (datestr === \"today\") {\n            parsedDate = new Date();\n            timeless = true;\n        }\n        else if (/Z$/.test(datestr) ||\n            /GMT$/.test(datestr))\n            parsedDate = new Date(date);\n        else if (config && config.parseDate)\n            parsedDate = config.parseDate(date, format);\n        else {\n            parsedDate =\n                !config || !config.noCalendar\n                    ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0)\n                    : new Date(new Date().setHours(0, 0, 0, 0));\n            let matched, ops = [];\n            for (let i = 0, matchIndex = 0, regexStr = \"\"; i < format.length; i++) {\n                const token = format[i];\n                const isBackSlash = token === \"\\\\\";\n                const escaped = format[i - 1] === \"\\\\\" || isBackSlash;\n                if (tokenRegex[token] && !escaped) {\n                    regexStr += tokenRegex[token];\n                    const match = new RegExp(regexStr).exec(date);\n                    if (match && (matched = true)) {\n                        ops[token !== \"Y\" ? \"push\" : \"unshift\"]({\n                            fn: revFormat[token],\n                            val: match[++matchIndex],\n                        });\n                    }\n                }\n                else if (!isBackSlash)\n                    regexStr += \".\";\n                ops.forEach(({ fn, val }) => (parsedDate = fn(parsedDate, val, locale) || parsedDate));\n            }\n            parsedDate = matched ? parsedDate : undefined;\n        }\n    }\n    if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {\n        config.errorHandler(new Error(`Invalid date provided: ${dateOrig}`));\n        return undefined;\n    }\n    if (timeless === true)\n        parsedDate.setHours(0, 0, 0, 0);\n    return parsedDate;\n};\nexport function compareDates(date1, date2, timeless = true) {\n    if (timeless !== false) {\n        return (new Date(date1.getTime()).setHours(0, 0, 0, 0) -\n            new Date(date2.getTime()).setHours(0, 0, 0, 0));\n    }\n    return date1.getTime() - date2.getTime();\n}\nexport function compareTimes(date1, date2) {\n    return (3600 * (date1.getHours() - date2.getHours()) +\n        60 * (date1.getMinutes() - date2.getMinutes()) +\n        date1.getSeconds() -\n        date2.getSeconds());\n}\nexport const isBetween = (ts, ts1, ts2) => {\n    return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);\n};\nexport const duration = {\n    DAY: 86400000,\n};\nexport function getDefaultHours(config) {\n    let hours = config.defaultHour;\n    let minutes = config.defaultMinute;\n    let seconds = config.defaultSeconds;\n    if (config.minDate !== undefined) {\n        const minHour = config.minDate.getHours();\n        const minMinutes = config.minDate.getMinutes();\n        const minSeconds = config.minDate.getSeconds();\n        if (hours < minHour) {\n            hours = minHour;\n        }\n        if (hours === minHour && minutes < minMinutes) {\n            minutes = minMinutes;\n        }\n        if (hours === minHour && minutes === minMinutes && seconds < minSeconds)\n            seconds = config.minDate.getSeconds();\n    }\n    if (config.maxDate !== undefined) {\n        const maxHr = config.maxDate.getHours();\n        const maxMinutes = config.maxDate.getMinutes();\n        hours = Math.min(hours, maxHr);\n        if (hours === maxHr)\n            minutes = Math.min(maxMinutes, minutes);\n        if (hours === maxHr && minutes === maxMinutes)\n            seconds = config.maxDate.getSeconds();\n    }\n    return { hours, minutes, seconds };\n}\n"]},"metadata":{},"sourceType":"module"}