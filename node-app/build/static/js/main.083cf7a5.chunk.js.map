{"version":3,"sources":["logo.svg","components/Landing/index.js","components/Landing/Landing.js","App.js","reportWebVitals.js","index.js"],"names":["Landing","componentDidMount","axios","get","window","location","protocol","hostname","port","then","a","res","console","log","data","handleChange","e","target","name","value","setState","handleSyncSubmit","preventDefault","message","container_num","state","input","q","post","arr","newData","seqNo","messageId","messageLoading","InlineLoading","description","Button","style","margin","onClick","handleFetch","push","cid","map","item","JSON","stringify","alert","loading","headers","key","header","this","Loading","withOverlay","FormGroup","legendText","minWidth","TextInput","id","labelText","onChange","placeholder","marginBottom","width","textAlign","toDisplay","src","theme","length","Table","TableHead","TableRow","TableHeader","TableBody","row","Object","keys","TableCell","React","Component","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.083cf7a5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import Landing from './Landing';\nexport default Landing;","import React from 'react';\nimport {Table, TableHeader, TableRow, TableBody, TableCell, TableHead} from 'carbon-components-react'\nimport { Button, Loading, InlineLoading, FormGroup, TextInput } from 'carbon-components-react';\nimport axios from 'axios'\nimport ReactJson from 'react-json-view'\nimport _ from 'lodash'\n\nclass Landing extends React.Component {\n    constructor(){\n        super()\n        this.state = {\n            headers:[\n                {\n                    key:\"seqNo\",\n                    header:\"Seq. No\"\n                },\n                {\n                    key:\"messageId\",\n                    header:\"Message ID\"\n                },\n                // {\n                //     key:\"correlationId\",\n                //     header:\"Correlation ID\"\n                // },\n                {\n                    key:\"message\",\n                    header:\"Message\"\n                }\n            ],\n            seqNo:1,\n            data:[],\n            loading: false, \n            messageLoading:{}\n        }\n    }\n\n    componentDidMount = ()=>{\n        axios.get(`${window.location.protocol}//${window.location.hostname}:${window.location.port}/getMessageList?q=inputC`).then(async res=>{\n            console.log(res.data.data)\n            // var msg = res.data.data.messages\n            // console.log(msg)\n            // var arr = await msg.map(item =>{\n            //     item.message = \n            //         <div>\n            //             {this.state.messageLoading[item.messageId]?\n            //                 <InlineLoading description=\"Loading...\" />\n            //                 :\n            //                 <Button style={{margin:\".5rem\"}} onClick={()=>this.getMessage(item.messageId)}>Fetch</Button>\n            //             }\n            //         </div>\n            //     return item\n            // })\n            // this.setState({data: arr, loading: false})\n        })\n    }\n\n    handleChange = (e)=>{\n        const { name, value } = e.target\n        // console.log(name, value)\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleSyncSubmit = (e)=>{\n\n        // let correlationId = _.times(48, () => (Math.random()*0xF<<0).toString(16)).join('');\n\n        e.preventDefault()\n        const data = {\n            message: { container_num: this.state.input},\n            q:\"tq2\",\n            // correlationId: correlationId,\n        }\n\n        axios.post(`${window.location.protocol}//${window.location.hostname}:${window.location.port}/postMessage`, data)\n        .then(res=>{\n            console.log(res.data)\n            // alert(\"Data submitted with submission ID: \" + res.data.messageId)\n            var arr = this.state.data\n            const newData = {\n                seqNo: this.state.seqNo,\n                messageId: res.data.messageId,\n                // correlationId: correlationId,\n                message: [\n                    <div>\n                        {this.state.messageLoading[res.data.messageId]?\n                            <InlineLoading description=\"Loading...\" />\n                            :\n                            <Button style={{margin:\".5rem\"}} onClick={()=>this.handleFetch(res.data.messageId)}>Fetch</Button>\n                        }\n                    </div>\n                ]\n            }\n            arr.push(newData)\n            this.setState({input:\"\", seqNo: newData.seqNo+1, data:arr})\n        })\n    }\n\n    handleFetch = (cid) =>{\n        // console.log(this.state.messageLoading)\n        // var loadState = this.state.messageLoading\n        // loadState[cid] = true\n        // console.log(loadState)\n        // this.setState({messageLoading: loadState})\n        axios.get(`${window.location.protocol}//${window.location.hostname}:${window.location.port}/getMessageFromC?q=outputC&id=${cid}`).then(async res=>{\n            console.log(res.data.data)\n            var arr = await this.state.data.map(item =>{\n                if(item.messageId === cid)\n                    if(res.data.data)\n                        item.message = JSON.stringify(res.data.data)\n                    else\n                        alert('No data found')\n                return item\n            })\n        this.setState({data: arr, loading: false})\n        })\n    }\n\n    render(){\n      return (\n        this.state.loading?\n        <div>\n            <Loading\n            description=\"Active loading indicator\" withOverlay={false}\n            />        \n        </div>\n          : \n        <div>\n            <div>\n            <FormGroup legendText=\"Sync Call\" style={{ minWidth: '400px' }}>\n                <TextInput\n                id=\"one\"\n                name=\"input\"\n                value={this.state.input}\n                labelText=\"Enter Container Num\"\n                onChange={this.handleChange}\n                placeholder=\"Enter Container Number\"\n                style={{ marginBottom: '1rem' }}\n                />\n                <Button onClick={this.handleSyncSubmit}>Submit</Button>\n            </FormGroup>\n            </div>\n            <div style={{width:\"50rem\", textAlign:\"left\"}}>\n                {this.state.toDisplay?\n                    <ReactJson \n                        src={this.state.toDisplay} \n                        theme=\"solarized\"\n                    />\n                :\n                <></>\n                }\n            </div>\n            {\n                this.state.data.length>0?\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                        {this.state.headers.map((header) => (\n                            <TableHeader key={header.key}>{header.header}</TableHeader>\n                        ))}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {this.state.data.map((row) => (\n                        <TableRow key={row.key}>\n                            {Object.keys(row)\n                            .map((key) => {\n                                // console.log(key)\n                                return <TableCell key={key}>{row[key]}</TableCell>;\n                            })}\n                        </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>           \n                :\n                <></>\n            }\n        </div>\n      )\n    }\n};\nexport default Landing;","import logo from './logo.svg';\nimport './App.scss';\nimport Landing from './components/Landing'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Landing />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}