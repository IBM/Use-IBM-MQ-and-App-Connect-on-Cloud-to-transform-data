const express = require('express');
const path = require('path');
var cors = require('cors')
const app = express();
var axios = require('axios');
var bodyParser = require('body-parser')
var fs = require('fs');
const NodeCache = require('node-cache');
const myCache = new NodeCache();
var setCookie = require('set-cookie-parser');
require('dotenv').config({path: __dirname + '/../.env'})

app.use(bodyParser.json())
app.use(cors())
app.use('/', express.static('./build'));


if (!fs.existsSync('cookiejar.txt')) {
    axios({
        method: 'post',
        url: 'https://' + process.env['URL'] + 'ibmmq/rest/v2/login',
        
        headers:{
            'Content-Type': 'application/json'
        },
        data: {
          username: process.env['USERNAME'],
          password: process.env['PASSWORD']
        }
    }).then(res =>{
        var cookies = setCookie.parse(res, {
            decodeValues: true,  // default: true
            // map: true           //default: false
        })
        // console.log(cookies)
        var content = `# Netscape HTTP Cookie File
# https://curl.haxx.se/docs/http-cookies.html
# This file was generated by libcurl! Edit at your own risk.

#HttpOnly_${process.env['URL']}	FALSE	/	TRUE	0	${cookies[0].name}	${cookies[0].value}
`
        // console.log(content)
        var status = myCache.set('token',{token: cookies[0].name +'='+ cookies[0].value})
        if (status){
            console.log('cache written')
        }
        fs.writeFile('./cookiejar.txt', content, err => {
            if (err) {
              console.error(err)
              return
            } else {
                console.log('file written')
            }
        })
        fs.writeFile('./cookiejar.json', JSON.stringify(cookies[0]), err => {
            if (err) {
              console.error(err)
              return
            } else {
                console.log('json written')
            }
        })
    }).catch(err =>{
        console.log(err)
    })
} else {
    // fs.readFile('./cookiejar.json',(err,data)=>{
    //     var data = JSON.parse(data)
    //     var status = myCache.set('token',{token: data.name +'='+ data.value})
    //     if(status) {
    //         console.log('cache written')
    //     }
    // })

    axios({
        method: 'post',
        url: 'https://' + process.env['URL'] + 'ibmmq/rest/v2/login',
        headers:{
            'Content-Type': 'application/json'
        },
        data: {
          username: process.env['USERNAME'],
          password: process.env['PASSWORD']
        }
    }).then(res =>{
        var cookies = setCookie.parse(res, {
            decodeValues: true,  // default: true
            // map: true           //default: false
        })
        // console.log(cookies)
        var content = `# Netscape HTTP Cookie File
# https://curl.haxx.se/docs/http-cookies.html
# This file was generated by libcurl! Edit at your own risk.

#HttpOnly_${process.env['URL']}	FALSE	/	TRUE	0	${cookies[0].name}	${cookies[0].value}
`
        // console.log(content)
        var status = myCache.set('token',{token: cookies[0].name +'='+ cookies[0].value})
        if (status){
            console.log('cache written')
        }
        fs.writeFile('./cookiejar.txt', content, err => {
            if (err) {
              console.error(err)
              return
            } else {
                console.log('file written')
            }
        })
        fs.writeFile('./cookiejar.json', JSON.stringify(cookies[0]), err => {
            if (err) {
              console.error(err)
              return
            } else {
                console.log('json written')
            }
        })
    }).catch(err =>{
        console.log(err)
    })

}

app.get('/getMessageList', (req, res) => {
    var q = req.query.q
    var config = {
    method: 'get',
    url: `https://${process.env['URL']}ibmmq/rest/v2/messaging/qmgr/${process.env['QMANAGER']}/queue/${process.env['QINPUTA']}/messagelist`,
    
    headers: { 
        'ibm-mq-rest-csrf-token': 'token-value', 
        'Accept': 'application/json', 
        'Cookie': myCache.get('token').token
    }
    };

    axios(config)
    .then(function (response) {
        // console.log(JSON.stringify(response.data));
        res.writeHead(200, {'Content-Type': 'application/json'});
        res.write(JSON.stringify({"data": response.data}));
        res.end()
    })
    .catch(function (error) {
        console.log(error);
        res.writeHead(200, {'Content-Type': 'application/json'});
        res.write(JSON.stringify({"data": 'error'}));
        res.end()
    });
});

app.get('/getMessageFromId', (req, res) => {
    var q = req.query.q
    var id = req.query.id
    var config = {
        method: 'delete',
        url: `https://${process.env['URL']}ibmmq/rest/v2/messaging/qmgr/${process.env['QMANAGER']}/queue/${process.env['QINPUTA']}/message`,
        headers: {
            'ibm-mq-rest-csrf-token': 'token-value',
            'Accept': '*/*',
            'Cookie': myCache.get('token').token
        },params: {
            correlationId: id
        },
    };

    axios(config)
    .then(function (response) {
        console.log(JSON.stringify(response.data));
        res.writeHead(200, {'Content-Type': 'application/json'});
        res.write(JSON.stringify({"data": response.data}));
        res.end()
    })
    .catch(function (error) {
        console.log(error);
        res.writeHead(200, {'Content-Type': 'application/json'});
        res.write(JSON.stringify({"data": 'error'}));
        res.end()
    });
});

app.post('/postMessage', (req, res) => {
    // console.log(req.body);
    var config = {
    method: 'post',
    url: `https://${process.env['URL']}ibmmq/rest/v2/messaging/qmgr/${process.env['QMANAGER']}/queue/${process.env['QOUTPUTA']}/message`,
    headers: {
        'ibm-mq-rest-csrf-token': 'token-value', 
        'Content-Type': 'text/plain',
        'Cookie': myCache.get('token').token,
        // 'ibm-mq-md-correlationId': req.body.correlationId
    },
    data: JSON.stringify(req.body.message)
    };
    
    axios(config)
    .then(response => {
        // console.log(response.headers['ibm-mq-md-messageid'])
        const messageId = response.headers['ibm-mq-md-messageid']
        console.log(messageId)
        // console.log(JSON.stringify(response.data));
        res.writeHead(200, {'Content-Type': 'application/json'});
        res.write(JSON.stringify({"messageId": messageId}));
        res.end()
    })
    .catch(function (error) {
        console.log(error);
        res.writeHead(200, {'Content-Type': 'application/json'});
        res.write(JSON.stringify({"data": 'error'}));
        res.end()
    });
});

app.get('/getMessageFromC', (req, res) => {
    var q = req.query.q
    var id = req.query.id
    
    var data = myCache.get(id)
    if(data){
        console.log(JSON.stringify(data));
        res.writeHead(200, {'Content-Type': 'application/json'});
        res.write(JSON.stringify({"data": data}));
        res.end()
    } else {
        res.writeHead(200, {'Content-Type': 'application/json'});
        res.write(JSON.stringify({"data": 'error'}));
        res.end()
    }
});

function get(){
    var config = {
        method: 'delete',
        url: `https://${process.env['URL']}ibmmq/rest/v2/messaging/qmgr/${process.env['QMANAGER']}/queue/${process.env['QINPUTA']}/message`,
        headers: {
            'ibm-mq-rest-csrf-token': 'token-value',
            'Accept': 'application/json',
            'Cookie': myCache.get('token').token
        }
    };

    axios(config)
    .then(function (response) {
        // console.log(JSON.stringify(response.data));
        // console.log((response.data));
        // console.log((typeof(response.data)));
        if(response.data){
            var data = response.data
            // console.log(data.msgId)
            var status = myCache.set(`${data.msgId}`,data)
            if(status){
                console.log('Cache Set')
            }
        }
    })
}

setInterval(get, 3000)

app.get('*', (req, res) => res.sendFile(path.resolve('build', 'index.html')));

app.listen(8080)